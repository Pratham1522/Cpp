#include<iostream>
#include<string>
#include<thread>
#include<mutex>
#include<functional>
using namespace std;
#define line(msg) cout<<"___________________"#msg"____________________\n"
namespace nm84
{
	mutex mute;
	class CA
	{
		int x{ 0 };
		int y{ 0 };
	public:
		void AddFun()
		{
			for (x = 1; x <= 5; x++)
			{
				string str = "AddFun x = " + to_string(x) + '\n';
				cout << str;
				this_thread::sleep_for(chrono::seconds(1));
			}
			mute.lock();
			for (y = 1; y <= 10; y++)
			{
				string str = "AddFun y = " + to_string(y) + '\n';
				cout << str;
				this_thread::sleep_for(chrono::seconds(1));
			}
			mute.unlock();
		}

		void SubFun()
		{
			mute.lock();
			for (y = -1; y > -10; y--)
			{
				string str = "\t\t\tSubFun y = " + to_string(y) + '\n';
				cout << str;
				this_thread::sleep_for(chrono::seconds(1));
			}
			mute.unlock();
			for (x = -1; x > -5; x--)
			{
				string str = "\t\t\tSubFun x = " + to_string(x) + '\n';
				cout << str;
				this_thread::sleep_for(chrono::seconds(1));
			}
		}
	};


	int main()
	{
		CA obj1;
		std::thread t1(std::bind(&CA::AddFun, std::ref(obj1)));
		std::thread t2(std::bind(&CA::SubFun, std::ref(obj1)));
		//for (int k = 1; k <= 5; k++)
		//{
		//	string str = "\t\t\t\t\t\tMain k = " + to_string(k) + '\n';
		//	cout << str;
		//	this_thread::sleep_for(chrono::seconds(1));
		//}
		//cout << "Main waits for t1 and t2\n";
		t1.join();
		t2.join();
		return 0;
	}

}